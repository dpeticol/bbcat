// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var canvas, ctx, cwx, cx, cy, cycle, delay, delayInterval, domain, frame, images, loadImages, pace, sitCenter, sitCenterFor, sleep, sources, step, walkCenterToLeft, walkCenterToRight, walkLeftToCenter, walkRightToCenter, zzz;
    domain = "" + document.location.origin + "/public/img/";
    sources = ['cat.png', 'cat-curl-z1.png', 'cat-curl-z2.png', 'cat-curl-z3.png', 'cat-curl.png', 'cat-dead.png', 'cat-happy.png', 'cat-mad.png', 'cat-sad.png', 'cat-sick.png', 'cat-walk1.png', 'cat-walk2.png', 'cat-walk1-right.png', 'cat-walk2-right.png'];
    cx = 64;
    cy = 0;
    cwx = 32;
    step = 16;
    frame = 750;
    delay = function(ms, cb) {
      return setTimeout(cb, ms);
    };
    delayInterval = function(ms, cb) {
      return setInterval(cb, ms);
    };
    loadImages = function(sources, images, cb) {
      var loadedImages, numImages, src, _i, _j, _len, _len1, _results;
      loadedImages = 0;
      numImages = 0;
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        src = sources[_i];
        numImages++;
      }
      _results = [];
      for (_j = 0, _len1 = sources.length; _j < _len1; _j++) {
        src = sources[_j];
        images[src] = new Image();
        images[src].onload = function() {
          if (++loadedImages >= numImages) {
            return cb(images);
          }
        };
        _results.push(images[src].src = domain + src);
      }
      return _results;
    };
    canvas = document.getElementById('pet');
    canvas.width = 256;
    canvas.height = 128;
    ctx = canvas.getContext('2d');
    ctx.clear = function() {
      return ctx.clearRect(0, 0, 256, 128);
    };
    images = {};
    sitCenterFor = function(count, cb) {
      ctx.clear();
      console.log('sitting cat');
      ctx.drawImage(images['cat.png'], cx, cy);
      return delay(count * frame, cb);
    };
    sitCenter = function(cb) {
      ctx.clear();
      console.log('sitting cat');
      ctx.drawImage(images['cat.png'], cx, cy);
      return delay(frame, cb);
    };
    walkCenterToLeft = function(cb) {
      console.log('walking center to left');
      ctx.clear();
      ctx.drawImage(images['cat-walk1.png'], cwx, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk2.png'], cwx - step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk1.png'], cwx - 2 * step, cy);
          return delay(frame, cb);
        });
      });
    };
    walkLeftToCenter = function(cb) {
      console.log('walking left to center');
      ctx.clear();
      ctx.drawImage(images['cat-walk2-right.png'], -3 * step, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk1-right.png'], -2 * step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk2-right.png'], -1 * step, cy);
          return delay(frame, cb);
        });
      });
    };
    walkCenterToRight = function(cb) {
      console.log('walking center to left');
      ctx.clear();
      ctx.drawImage(images['cat-walk1-right.png'], 0, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk2-right.png'], step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk1-right.png'], step * 2, cy);
          return delay(frame, function() {
            ctx.clear();
            ctx.drawImage(images['cat-walk2-right.png'], step * 3, cy);
            return delay(frame, function() {
              ctx.clear();
              ctx.drawImage(images['cat-walk1-right.png'], step * 4, cy);
              return delay(frame, cb);
            });
          });
        });
      });
    };
    walkRightToCenter = function(cb) {
      console.log('walking right to center');
      ctx.clear();
      ctx.drawImage(images['cat-walk2.png'], 7 * step, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk1.png'], 6 * step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk2.png'], 5 * step, cy);
          return delay(frame, function() {
            ctx.clear();
            ctx.drawImage(images['cat-walk1.png'], 4 * step, cy);
            return delay(frame, function() {
              ctx.clear();
              ctx.drawImage(images['cat-walk2.png'], 3 * step, cy);
              return delay(frame, cb);
            });
          });
        });
      });
    };
    pace = function(cb) {
      console.log('pacing from center to center');
      return walkCenterToLeft(function() {
        return walkLeftToCenter(function() {
          return walkCenterToRight(function() {
            return walkRightToCenter(cb);
          });
        });
      });
    };
    zzz = function(cb) {
      console.log('zzz');
      ctx.clear();
      ctx.drawImage(images['cat-curl.png'], cx, cy);
      ctx.drawImage(images['cat-curl-z1.png'], cx, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-curl.png'], cx, cy);
        ctx.drawImage(images['cat-curl-z2.png'], cx, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-curl.png'], cx, cy);
          ctx.drawImage(images['cat-curl-z3.png'], cx, cy);
          return delay(frame, function() {
            ctx.clear();
            ctx.drawImage(images['cat-curl.png'], cx, cy);
            return delay(frame, cb);
          });
        });
      });
    };
    sleep = function(cb) {
      console.log('sleeping');
      ctx.clear();
      ctx.drawImage(images['cat-curl.png'], cx, cy);
      return delay(frame * 5, function() {
        ctx.clear();
        return zzz(function() {
          return zzz(function() {
            return zzz(cb);
          });
        });
      });
    };
    cycle = function() {
      ctx.clear();
      return sitCenterFor(5, function() {
        return pace(function() {
          return sitCenterFor(5, function() {
            return sleep(cycle);
          });
        });
      });
    };
    return loadImages(sources, images, function() {
      console.log('images loaded');
      cycle();
      return console.log('done');
    });
  });

}).call(this);
