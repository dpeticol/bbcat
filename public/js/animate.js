// Generated by CoffeeScript 1.3.3
(function() {

  $(function() {
    var canvas, chooseCycle, ctx, cwx, cx, cy, cycle, delay, delayInterval, domain, frame, images, loadImages, pace, paceOnLeft, poopCycle, px, py, sitCenter, sitCenterFor, sitCenterIfNeeded, sitIfNeeded, sitLeftIfNeeded, sitRightIfNeeded, sleep, sources, step, walkCenterToLeft, walkCenterToRight, walkLeftToCenter, walkRightToCenter, zzz;
    if (window.DeviceMotionEvent) {
      console.log('this browser supports devicemotion');
      window.addEventListener('devicemotion', function(event) {
        var power, x, y, z;
        y = event.acceleration.y;
        z = event.acceleration.z;
        x = event.acceleration.x;
        console.log(x, y, z);
        power = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
        if (power > 50) {
          console.log('the power was', power);
          return window.bb.isAngry = true;
        }
      });
    } else {
      console.log('this browser does not support devicemotion');
    }
    domain = "" + document.location.origin + "/public/img/";
    sources = ['cat.png', 'cat-curl-z1.png', 'cat-curl-z2.png', 'cat-curl-z3.png', 'cat-curl.png', 'cat-dead.png', 'cat-happy.png', 'cat-mad.png', 'cat-sad.png', 'cat-sick.png', 'cat-walk1.png', 'cat-walk2.png', 'cat-walk1-right.png', 'cat-walk2-right.png', 'poop.png', 'poop1.png', 'poop2.png', 'poop3.png'];
    cx = 64;
    cy = 0;
    cwx = 32;
    step = 16;
    px = 188;
    py = 56;
    frame = 750;
    delay = function(ms, cb) {
      return setTimeout(cb, ms);
    };
    delayInterval = function(ms, cb) {
      return setInterval(cb, ms);
    };
    images = {};
    loadImages = function(sources, images, cb) {
      var loadedImages, numImages, src, _i, _j, _len, _len1, _results;
      loadedImages = 0;
      numImages = 0;
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        src = sources[_i];
        numImages++;
      }
      _results = [];
      for (_j = 0, _len1 = sources.length; _j < _len1; _j++) {
        src = sources[_j];
        images[src] = new Image();
        images[src].onload = function() {
          if (++loadedImages >= numImages) {
            return cb(images);
          }
        };
        _results.push(images[src].src = domain + src);
      }
      return _results;
    };
    canvas = document.getElementById('pet');
    canvas.width = 256;
    canvas.height = 128;
    ctx = canvas.getContext('2d');
    ctx.clear = function() {
      ctx.clearRect(0, 0, 256, 128);
      if (window.bb.pet.poop) {
        return ctx.drawImage(images['poop.png'], px, py);
      }
    };
    sitCenterFor = function(count, cb) {
      ctx.clear();
      console.log('sitting cat');
      if (window.bb.emotion() === 'sick') {
        ctx.drawImage(images['cat-sick.png'], cx, cy);
      } else if (window.bb.emotion() === 'sad') {
        ctx.drawImage(images['cat-sad.png'], cx, cy);
      } else {
        ctx.drawImage(images['cat.png'], cx, cy);
      }
      return delay(count * frame, cb);
    };
    sitCenter = function(cb) {
      ctx.clear();
      console.log('sitting cat');
      ctx.drawImage(images['cat.png'], cx, cy);
      return delay(frame, cb);
    };
    sitCenterIfNeeded = function(cb) {
      return sitIfNeeded(cx, cb);
    };
    sitLeftIfNeeded = function(cb) {
      return sitIfNeeded(0, cb);
    };
    sitRightIfNeeded = function(cb) {
      return sitIfNeeded(128, cb);
    };
    sitIfNeeded = function(x, cb) {
      if (window.bb.petme) {
        console.log('pet the cat');
        ctx.clear();
        ctx.drawImage(images['cat-happy.png'], x, cy);
        return delay(frame, cb);
      } else {
        return cb();
      }
    };
    walkCenterToLeft = function(cb) {
      console.log('walking center to left');
      ctx.clear();
      ctx.drawImage(images['cat-walk1.png'], cwx, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk2.png'], cwx - step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk1.png'], cwx - 2 * step, cy);
          return delay(frame, function() {
            return sitLeftIfNeeded(cb);
          });
        });
      });
    };
    walkLeftToCenter = function(cb) {
      console.log('walking left to center');
      ctx.clear();
      ctx.drawImage(images['cat-walk2-right.png'], -3 * step, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk1-right.png'], -2 * step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk2-right.png'], -1 * step, cy);
          return delay(frame, function() {
            return sitCenterIfNeeded(cb);
          });
        });
      });
    };
    walkCenterToRight = function(cb) {
      console.log('walking center to left');
      ctx.clear();
      ctx.drawImage(images['cat-walk1-right.png'], 0, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk2-right.png'], step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk1-right.png'], step * 2, cy);
          return delay(frame, function() {
            ctx.clear();
            ctx.drawImage(images['cat-walk2-right.png'], step * 3, cy);
            return delay(frame, function() {
              ctx.clear();
              ctx.drawImage(images['cat-walk1-right.png'], step * 4, cy);
              return delay(frame, function() {
                return sitRightIfNeeded(cb);
              });
            });
          });
        });
      });
    };
    walkRightToCenter = function(cb) {
      console.log('walking right to center');
      ctx.clear();
      ctx.drawImage(images['cat-walk2.png'], 7 * step, cy);
      return delay(frame, function() {
        ctx.clear();
        ctx.drawImage(images['cat-walk1.png'], 6 * step, cy);
        return delay(frame, function() {
          ctx.clear();
          ctx.drawImage(images['cat-walk2.png'], 5 * step, cy);
          return delay(frame, function() {
            ctx.clear();
            ctx.drawImage(images['cat-walk1.png'], 4 * step, cy);
            return delay(frame, function() {
              ctx.clear();
              ctx.drawImage(images['cat-walk2.png'], 3 * step, cy);
              return delay(frame, function() {
                return sitCenterIfNeeded(cb);
              });
            });
          });
        });
      });
    };
    pace = function(cb) {
      console.log('pacing from center to center');
      return walkCenterToLeft(function() {
        return walkLeftToCenter(function() {
          return walkCenterToRight(function() {
            return walkRightToCenter(cb);
          });
        });
      });
    };
    paceOnLeft = function(cb) {
      console.log('pacing from center to left to center');
      return walkCenterToLeft(function() {
        return walkLeftToCenter(function() {
          return walkCenterToLeft(function() {
            return walkLeftToCenter(cb);
          });
        });
      });
    };
    zzz = function(cb) {
      console.log('zzz');
      ctx.clear();
      ctx.drawImage(images['cat-curl.png'], cx, cy);
      ctx.drawImage(images['cat-curl-z1.png'], cx, cy);
      return delay(frame, function() {
        return sitCenterIfNeeded(function() {
          ctx.clear();
          ctx.drawImage(images['cat-curl.png'], cx, cy);
          ctx.drawImage(images['cat-curl-z2.png'], cx, cy);
          return delay(frame, function() {
            return sitCenterIfNeeded(function() {
              ctx.clear();
              ctx.drawImage(images['cat-curl.png'], cx, cy);
              ctx.drawImage(images['cat-curl-z3.png'], cx, cy);
              return delay(frame, function() {
                return sitCenterIfNeeded(function() {
                  ctx.clear();
                  ctx.drawImage(images['cat-curl.png'], cx, cy);
                  return delay(frame, function() {
                    return sitCenterIfNeeded(cb);
                  });
                });
              });
            });
          });
        });
      });
    };
    sleep = function(cb) {
      console.log('sleeping');
      ctx.clear();
      ctx.drawImage(images['cat-curl.png'], cx, cy);
      return delay(frame * 5, function() {
        return sitCenterIfNeeded(function() {
          ctx.clear();
          return zzz(function() {
            return zzz(function() {
              return zzz(cb);
            });
          });
        });
      });
    };
    chooseCycle = function() {
      if (window.bb.pet.poop) {
        return poopCycle();
      } else {
        return cycle();
      }
    };
    cycle = function() {
      ctx.clear();
      return sitCenterFor(5, function() {
        return pace(function() {
          return sitCenterFor(5, function() {
            return sleep(chooseCycle);
          });
        });
      });
    };
    poopCycle = function() {
      ctx.clear();
      return sitCenterFor(5, function() {
        return paceOnLeft(function() {
          return sitCenterFor(5, function() {
            return sleep(chooseCycle);
          });
        });
      });
    };
    return loadImages(sources, images, function() {
      console.log('images loaded');
      chooseCycle();
      return console.log('done');
    });
  });

}).call(this);
